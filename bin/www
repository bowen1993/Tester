#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('fhirtester:server');
var http = require('http');
var sleep = require('sleep');
var taskAction = require('../services/taskAction');


/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

let Fiber = require('fibers');


function fiber_socket(socket, next){
    Fiber(function() {
        try {
            return next();
        }
        catch (e) {
            next(new Error('Authentication error'));
        }
    }).run();
}

// retrive test results

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);
var io = require('socket.io')(server);
io.on('connection', function(socket){
  socket.on('retrive', function(taskid){
    console.log(taskid);
    socket.join(taskid);
    Fiber(function(){
      var counter = 0;
      console.log(taskid);
      while( counter < 1000 ){
        var steps = taskAction.get_task_steps(taskid);
        console.log('sending step')
        if( steps.result ){
          io.sockets.in(taskid).emit('result', steps);
          break;
        }else{
          io.sockets.in(taskid).emit('result', steps);
          counter += 1;
        }
        sleep.msleep(200);
      }
      socket.disconnect(true);
      Fiber.yield();
    }).run();
  });
});
/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
